-------------
HIGH Priority
-------------
add config file for AXF
add ON_EXTENSION_LOADED event (to solve the load order issue for extension plugins)
add param passing to SubscribeEvent()

add a lightweight reflection interface (for headerless access to AXF and extensions from any language)
add a messaging system for interplugin communication (use the event system to deliver the messages)
move application-specific interfaces to extension plugins to reduce the code size of AXF (For example, Hook interface and Sig scanner are application-specific)
implement a memory allocation interface for managed memory (All plugins shall use this instead of malloc/new to avoid memory leaks and simplify code)

expose EventSystem::FireEventStopIf to pluginapi
------------
MID Priority
------------
add plugin auto loader with config file

------------
LOW Priority
------------
add an assembler extension
add a socket hook extension (use PluginInterface.HookInterface)
add a packet sniffer GUI plugin (use the socket hook extension to receive packet events)
add a direct3d GUI extension (in game version of wingui, use AntTweakBar and hook d3d with PluginInterface.HookInterface)
add a Python plugin loader extension (use ON_LOAD_PLUGIN event to receive notification)

port pluginapi.h and extensionapi.h to other languages

---------
Completed
---------
add ON_LOAD_PLUGIN event (to handle loading of unknown plugin types, AXF only knows how to load DLL plugins)

add underC plugin loader extension (underC is a script version of C++, use ON_LOAD_PLUGIN event to receive notification)

The current method of loading plugin is flawed because it checks the version after the plugin has been loaded
Solution: Subscribe to the ON_INIT_EVENT, force plugin writers to return the plugin version only in OnLoad()
plugins can also return author and description info

expose Pluginapi to underc plugins to make it useful